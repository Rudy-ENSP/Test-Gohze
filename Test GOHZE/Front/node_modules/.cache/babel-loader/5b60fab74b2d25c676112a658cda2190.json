{"ast":null,"code":"/* jshint node: true */\nvar express = require(\"express\");\n\nvar erros = require(\"erros\");\n\nvar _middleEarth = require(\"middle-earth\");\n/*\n * noop fn\n */\n\n\nfunction noop() {\n  /* */\n}\n/*\n * app & expose\n */\n\n\nvar app = module.exports = express();\napp.set(\"port\", process.env.PORT || 1337);\napp.middlewares([{\n  name: \"static\",\n  fn: noop\n}, {\n  name: \"error-404\",\n  cb: erros.fouro4()\n}, {\n  name: \"error-end\",\n  cb: erros.handler({\n    views: app.get(\"views\")\n  })\n}]);\n/*\n * setViews sets the views path and view engine\n *\n * @param {String} path\n * @param {String} engine\n * @api public\n */\n\napp.setViews = function (path, engine) {\n  this.set(\"views\", path);\n  this.set(\"view engine\", engine);\n};\n/*\n * setStatic overwrites the static MiddleEarth stack with a proper path\n *\n * @param {String} path\n * @api public\n */\n\n\napp.setStatic = function (path) {\n  this.middlewares().overwrite(\"static\", {\n    name: \"static\",\n    cb: express.static(path)\n  });\n};\n/*\n * setRoutes adds a route MiddleEarth stack before static\n *\n * @param {Function} draw\n * @api Private\n */\n\n\napp.setRoutes = function (routes) {\n  this.middlewares().before(\"static\", {\n    name: \"routes\",\n    fn: routes.bind(this, this)\n  });\n};\n/*\n * listen overwrites the original express listen and allows applying MiddleEarth\n * stack middlewares before the app is spun up\n *\n * @param {Number} port\n * @param {Function} callback\n * @api Public\n */\n\n\napp.listen = function () {\n  var self = this;\n  var _listen = app.listen;\n  return function (port, callback) {\n    self.middlewares().finish();\n    return _listen.call(self, port, callback);\n  };\n}.call(app);","map":{"version":3,"sources":["/home/rudy/Bureau/Test GOHZE/gohze_front/node_modules/bootstrapp/index.js"],"names":["express","require","erros","_middleEarth","noop","app","module","exports","set","process","env","PORT","middlewares","name","fn","cb","fouro4","handler","views","get","setViews","path","engine","setStatic","overwrite","static","setRoutes","routes","before","bind","listen","self","_listen","port","callback","finish","call"],"mappings":"AAAA;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,cAAD,CAA1B;AAEA;AACA;AACA;;;AAEA,SAASG,IAAT,GAAgB;AAAE;AAAO;AAEzB;AACA;AACA;;;AAEA,IAAIC,GAAG,GAAGC,MAAM,CAACC,OAAP,GAAiBP,OAAO,EAAlC;AACAK,GAAG,CAACG,GAAJ,CAAQ,MAAR,EAAiBC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAArC;AAEAN,GAAG,CAACO,WAAJ,CAAgB,CACd;AAACC,EAAAA,IAAI,EAAE,QAAP;AAAoBC,EAAAA,EAAE,EAAEV;AAAxB,CADc,EAEd;AAACS,EAAAA,IAAI,EAAE,WAAP;AAAoBE,EAAAA,EAAE,EAAEb,KAAK,CAACc,MAAN;AAAxB,CAFc,EAGd;AAACH,EAAAA,IAAI,EAAE,WAAP;AAAoBE,EAAAA,EAAE,EAAEb,KAAK,CAACe,OAAN,CAAc;AAACC,IAAAA,KAAK,EAAEb,GAAG,CAACc,GAAJ,CAAQ,OAAR;AAAR,GAAd;AAAxB,CAHc,CAAhB;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAd,GAAG,CAACe,QAAJ,GAAe,UAASC,IAAT,EAAeC,MAAf,EAAuB;AACpC,OAAKd,GAAL,CAAS,OAAT,EAAkBa,IAAlB;AACA,OAAKb,GAAL,CAAS,aAAT,EAAwBc,MAAxB;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;;;AAEAjB,GAAG,CAACkB,SAAJ,GAAgB,UAASF,IAAT,EAAe;AAC7B,OACGT,WADH,GAEGY,SAFH,CAEa,QAFb,EAEuB;AACnBX,IAAAA,IAAI,EAAE,QADa;AAEnBE,IAAAA,EAAE,EAAEf,OAAO,CAACyB,MAAR,CAAeJ,IAAf;AAFe,GAFvB;AAMD,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;;;AAEAhB,GAAG,CAACqB,SAAJ,GAAgB,UAASC,MAAT,EAAiB;AAC/B,OACGf,WADH,GAEGgB,MAFH,CAEU,QAFV,EAEoB;AAChBf,IAAAA,IAAI,EAAE,QADU;AAEhBC,IAAAA,EAAE,EAAEa,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkB,IAAlB;AAFY,GAFpB;AAMD,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAxB,GAAG,CAACyB,MAAJ,GAAc,YAAW;AACvB,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,OAAO,GAAG3B,GAAG,CAACyB,MAAlB;AACA,SAAO,UAASG,IAAT,EAAeC,QAAf,EAAyB;AAC9BH,IAAAA,IAAI,CACDnB,WADH,GAEGuB,MAFH;AAIA,WAAOH,OAAO,CAACI,IAAR,CAAaL,IAAb,EAAmBE,IAAnB,EAAyBC,QAAzB,CAAP;AACD,GAND;AAOD,CAVY,CAUVE,IAVU,CAUL/B,GAVK,CAAb","sourcesContent":["/* jshint node: true */\n\nvar express = require(\"express\");\nvar erros = require(\"erros\");\nvar _middleEarth = require(\"middle-earth\");\n\n/*\n * noop fn\n */\n\nfunction noop() { /* */ }\n\n/*\n * app & expose\n */\n\nvar app = module.exports = express();\napp.set(\"port\", (process.env.PORT || 1337));\n\napp.middlewares([\n  {name: \"static\",    fn: noop},\n  {name: \"error-404\", cb: erros.fouro4()},\n  {name: \"error-end\", cb: erros.handler({views: app.get(\"views\")})}\n]);\n\n/*\n * setViews sets the views path and view engine\n *\n * @param {String} path\n * @param {String} engine\n * @api public\n */\n\napp.setViews = function(path, engine) {\n  this.set(\"views\", path);\n  this.set(\"view engine\", engine);\n};\n\n/*\n * setStatic overwrites the static MiddleEarth stack with a proper path\n *\n * @param {String} path\n * @api public\n */\n\napp.setStatic = function(path) {\n  this\n    .middlewares()\n    .overwrite(\"static\", {\n      name: \"static\",\n      cb: express.static(path)\n    });\n};\n\n/*\n * setRoutes adds a route MiddleEarth stack before static\n *\n * @param {Function} draw\n * @api Private\n */\n\napp.setRoutes = function(routes) {\n  this\n    .middlewares()\n    .before(\"static\", {\n      name: \"routes\",\n      fn: routes.bind(this, this)\n    });\n};\n\n/*\n * listen overwrites the original express listen and allows applying MiddleEarth\n * stack middlewares before the app is spun up\n *\n * @param {Number} port\n * @param {Function} callback\n * @api Public\n */\n\napp.listen = (function() {\n  var self = this;\n  var _listen = app.listen;\n  return function(port, callback) {\n    self\n      .middlewares()\n      .finish();\n\n    return _listen.call(self, port, callback);\n  };\n}).call(app);\n\n"]},"metadata":{},"sourceType":"script"}