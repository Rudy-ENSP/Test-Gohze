{"ast":null,"code":"/* jshint node: true */\nvar path = require('path');\n\nvar statuscodes = require(\"http\").STATUS_CODES;\n/*\n * handler middlware\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\n\nexports.handler = function (options) {\n  return function (err, req, res, next) {\n    if ('undefined' === typeof options) {\n      options = {};\n    }\n\n    var viewpath = options.views || './';\n    var viewext = options.view_ext || 'jade';\n    var error = {\n      status: options.default_status || 500,\n      message: statuscodes[this.status]\n    };\n\n    if ('string' === typeof err) {\n      error.message = err;\n    } // handle Error and anything inherited, hopefully... eg.\n    //\n    //    function MyError(msg) {\n    //      Error.captureStackTrace(this);\n    //      this.message = msg;\n    //      this.name = 'MyError';\n    //    }\n    //\n    //    MyError.prototype = Object.create(Error.prototype);\n    //\n\n\n    if ('Error' === err.constructor.name) {\n      error.message = err.message;\n\n      if (err.status) {\n        error.status = err.status;\n      }\n    }\n\n    res.status(error.status); // set status\n\n    var respondto = {\n      text: function () {\n        res.send(error.message);\n      },\n      html: function () {\n        var template = 'client' === erroris.call(error) ? '4xx' : '5xx';\n        var view = path.resolve(path.join(viewpath, template + '.' + viewext));\n        res.render(view, {\n          error: error\n        });\n      },\n      json: function () {\n        res.send({\n          error: error\n        });\n      }\n    };\n    res.format(respondto);\n  };\n};\n/*\n * 404 middleware\n *\n * Should be at the end of the middleware stack, but before the error handler\n * else express handles 404s by default\n *\n * @return {Function}\n * @api public\n */\n\n\nexports.fouro4 = function () {\n  return function (req, res, next) {\n    var err = new Error();\n    err.status = 404;\n    err.message = statuscodes[err.status];\n    next(err);\n  };\n};\n/*\n * return the type of error based on status, Client (4xx) vs Server (5xx)\n *\n * @return {String}\n * @api private\n */\n\n\nfunction erroris() {\n  var self = this;\n  var status = this.status;\n\n  if ('undefined' === typeof status) {\n    return 'server';\n  }\n\n  if (status >= 400 && status <= 499) {\n    return 'client';\n  } else {\n    return 'server'; // everything else is assumed 5xx or should be\n  }\n}","map":{"version":3,"sources":["/home/rudy/Bureau/Test GOHZE/gohze_front/node_modules/erros/index.js"],"names":["path","require","statuscodes","STATUS_CODES","exports","handler","options","err","req","res","next","viewpath","views","viewext","view_ext","error","status","default_status","message","constructor","name","respondto","text","send","html","template","erroris","call","view","resolve","join","render","json","format","fouro4","Error","self"],"mappings":"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","sourcesContent":["/* jshint node: true */\n\nvar path = require('path');\nvar statuscodes = require(\"http\").STATUS_CODES;\n\n\n/*\n * handler middlware\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nexports.handler = function(options) {\n  return function(err, req, res, next) {\n    if ('undefined' === typeof options) {\n      options = {};\n    }\n\n    var viewpath = options.views || './';\n    var viewext = options.view_ext || 'jade';\n\n    var error = {\n      status: options.default_status || 500,\n      message: statuscodes[this.status]\n    };\n\n    if ('string' === typeof err) {\n      error.message = err;\n    }\n\n    // handle Error and anything inherited, hopefully... eg.\n    //\n    //    function MyError(msg) {\n    //      Error.captureStackTrace(this);\n    //      this.message = msg;\n    //      this.name = 'MyError';\n    //    }\n    //\n    //    MyError.prototype = Object.create(Error.prototype);\n    //\n    if ('Error' === err.constructor.name) {\n      error.message = err.message;\n\n      if (err.status) {\n        error.status = err.status;\n      }\n    }\n\n    res.status(error.status); // set status\n\n    var respondto = {\n      text: function() {\n        res.send(error.message);\n      },\n      html: function() {\n        var template = 'client' === erroris.call(error) ? '4xx' : '5xx';\n        var view = path.resolve(path.join(viewpath, template+'.'+viewext));\n        res.render(view, {error: error});\n      },\n      json: function() {\n        res.send({error: error});\n      }\n    };\n\n    res.format(respondto);\n  };\n};\n\n\n/*\n * 404 middleware\n *\n * Should be at the end of the middleware stack, but before the error handler\n * else express handles 404s by default\n *\n * @return {Function}\n * @api public\n */\n\nexports.fouro4 = function() {\n  return function(req, res, next) {\n    var err = new Error();\n    err.status = 404;\n    err.message = statuscodes[err.status];\n    next(err);\n  };\n};\n\n\n/*\n * return the type of error based on status, Client (4xx) vs Server (5xx)\n *\n * @return {String}\n * @api private\n */\n\nfunction erroris() {\n  var self = this;\n  var status = this.status;\n\n  if ('undefined' === typeof status) {\n    return 'server';\n  }\n\n  if (status >= 400 && status <= 499) {\n    return 'client';\n  } else {\n    return 'server'; // everything else is assumed 5xx or should be\n  }\n}\n\n"]},"metadata":{},"sourceType":"script"}